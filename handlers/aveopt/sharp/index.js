const fs = require('fs')
const xml2js = require('xml2js')
const parser = new xml2js.Parser()
const sharp = require('sharp')
const feedPath = './handlers/aveopt/products_feed.xml'
const imagesFolderName = 'images'

const noImgProductsID = [
    '1755703847',
    '1438214277',
    '1515603657',
    '1518036978',
    '1549111705',
    '1549112943',
    '1549114173',
    '1549114505',
    '1549120350',
    '1549124213',
    '1549229411',
    '1549230211',
    '1549231120',
    '1549232726',
    '1549257553',
    '1549258005',
    '1549258611',
    '1549282078',
    '1554962112',
    '1557322532',
    '1563893672',
    '1567857862',
    '1574485971',
    '1602527393',
    '1602811194',
    '1603257390',
    '1603269643',
    '1603283145',
    '1603391222',
    '1603690325',
    '1604154305',
    '1604330713',
    '1604350976',
    '1604520419',
    '1604520893',
    '1604614016',
    '1604615388',
    '1604649900',
    '1604651002',
    '1604667101',
    '1604970696',
    '1604975068',
    '1604987513',
    '1604992113',
    '1604998020',
    '1605085978',
    '1605086212',
    '1605327142',
    '1605327908',
    '1605403218',
    '1605412731',
    '1605488013',
    '1605494844',
    '1605503523',
    '1605524588',
    '1605673226',
    '1605673431',
    '1605894142',
    '1605910763',
    '1605916389',
    '1606138156',
    '1606178768',
    '1620366128',
    '1624969109',
    '1624984730',
    '1625999781',
    '1628100950',
    '1631225203',
    '1631228217',
    '1631251948',
    '1631254181',
    '1633313711',
    '1636759964',
    '1636823129',
    '1637225745',
    '1639635956',
    '1639712710',
    '1639733582',
    '1639737659',
    '1639746018',
    '1639843443',
    '1639843613',
    '1639849606',
    '1639853941',
    '1639856995',
    '1639860721',
    '1648277890',
    '1648297206',
    '1648305776',
    '1648307423',
    '1650785394',
    '1651145534',
    '1656067112',
    '1656067209',
    '1656067356',
    '1656838313',
    '1656842833',
    '1659052057',
    '1659898586',
    '1659900683',
    '1661188045',
    '1661190842',
    '1661799265',
    '1661810922',
    '1661911538',
    '1662919490',
    '1662919591',
    '1662921830',
    '1662939585',
    '1662943563',
    '1663566129',
    '1663570030',
    '1663570810',
    '1663573076',
    '1666601375',
    '1667087430',
    '1668266321',
    '1668267238',
    '1668272194',
    '1668274990',
    '1668279342',
    '1668283678',
    '1671662981',
    '1672820815',
    '1672825877',
    '1672836049',
    '1672841762',
    '1672872648',
    '1673451015',
    '1673461309',
    '1673462502',
    '1673464293',
    '1673467709',
    '1673470800',
    '1673481869',
    '1673487759',
    '1673494271',
    '1673502986',
    '1673508140',
    '1673845255',
    '1673852428',
    '1673859395',
    '1673868613',
    '1673873908',
    '1673876699',
    '1673880732',
    '1673884553',
    '1673886350',
    '1673887511',
    '1673888446',
    '1673889497',
    '1673889919',
    '1674067385',
    '1674103713',
    '1674111278',
    '1674117949',
    '1674120453',
    '1674123854',
    '1674131153',
    '1675134143',
    '1675134316',
    '1675206244',
    '1675932232',
    '1676266712',
    '1676527894',
    '1677853388',
    '1677863902',
    '1677864976',
    '1677898096',
    '1678205525',
    '1678207445',
    '1678235221',
    '1678302778',
    '1681046286',
    '1683322498',
    '1684035870',
    '1684149719',
    '1684150394',
    '1684157166',
    '1684646289',
    '1685232886',
    '1685240510',
    '1685252300',
    '1685291092',
    '1685293084',
    '1685725863',
    '1685728253',
    '1688899569',
    '1688909864',
    '1688930226',
    '1689566236',
    '1690019679',
    '1690075751',
    '1690117127',
    '1691138078',
    '1694027927',
    '1694772715',
    '1694841254',
    '1694884164',
    '1695587396',
    '1695730723',
    '1696391227',
    '1696411409',
    '1696505956',
    '1696510427',
    '1696547689',
    '1696553488',
    '1696556255',
    '1696565701',
    '1696573855',
    '1696579791',
    '1696910381',
    '1696992492',
    '1697367452',
    '1697380563',
    '1697809845',
    '1697814774',
    '1697821624',
    '1698171003',
    '1698176770',
    '1698179114',
    '1698462137',
    '1699700231',
    '1699717327',
    '1699799154',
    '1700094219',
    '1700584346',
    '1700830761',
    '1702719586',
    '1702919085',
    '1702929392',
    '1702937221',
    '1703003133',
    '1703007038',
    '1703013794',
    '1705747725',
    '1706003193',
    '1706008483',
    '1708664029',
    '1713091031',
    '1713095799',
    '1713795541',
    '1714307564',
    '1714355320',
    '1714419035',
    '1714998258',
    '1716178038',
    '1716886290',
    '1716886798',
    '1716886908',
    '1716887188',
    '1718395725',
    '1718396997',
    '1718952952',
    '1719687323',
    '1719690282',
    '1719695309',
    '1720234167',
    '1720234725',
    '1720240427',
    '1721545680',
    '1721557479',
    '1721646301',
    '1723103000',
    '1724687402',
    '1726604971',
    '1727721186',
    '1727732108',
    '1727737066',
    '1728332605',
    '1728340184',
    '1733127435',
    '1733298189',
    '1733572532',
    '1733574609',
    '1735397484',
    '1735412287',
    '1735421181',
    '1739578370',
    '1739841983',
    '1739910415',
    '1740360081',
    '1741635560',
    '1741748912',
    '1741769444',
    '1742330091',
    '1742898463',
    '1742900254',
    '1744879453',
    '1744886993',
    '1744891926',
    '1745980201',
    '1745984094',
    '1751643430',
    '1752305970',
    '1752310494',
    '1752337653',
    '1757686495',
    '1757741734',
    '1760121261',
    '1760133056',
    '1760424692',
    '1760439870',
    '1760440359',
    '1766068423',
    '1766076519',
    '1675933071',
    '1728321769',
    '1721550461',
    '1713127008',
    '1725925612',
    '1771109905',
    '1771129988',
    '1771145055',
    '1771646236',
    '1771732636',
    '1771749165',
    '1773751559',
    '1773753797',
    '1626010180',
    '1636501051',
    '1654269914',
    '1668280930',
    '1684647623',
    '1685734708',
    '1691328068',
    '1716502586',
    '1733284760',
    '1739856872',
    '1742337664',
    '1742342542',
    '1742344802'
]

const noImgProductsID11 = ['1755703847', '1438214277']

;(async () => {
    console.log(`Reading ${feedPath}\n`)
    const feedText = fs.readFileSync(feedPath)
    const feedObject = await parser.parseStringPromise(feedText)
    let feedOffers = feedObject.yml_catalog.shop[0].offers[0].offer

    let noImgProducts = []
    noImgProductsID.forEach((noImgProductID) => {
        const offer = feedOffers.find((offer) => offer.$.id === noImgProductID)
        if (!offer) return
        const folderPath = `${__dirname}/${imagesFolderName}/${offer.$.id}`
        noImgProducts.push({
            id: offer.$.id,
            pictures: [...offer.picture],
            folder: folderPath
        })
        fs.mkdirSync(folderPath)
    })

    for (product of noImgProducts) {
        for (pictureURL of product.pictures) {
            const pictureName = pictureURL.match(
                /[^/\\&\?]+\.\w{3,4}(?=([\?&].*$|$))/g
            )
            if (!pictureName[0])
                return console.log(
                    `pictureName is not found id: ${product.id} url: ${pictureURL}`
                )

            console.log(
                `Fetching PRODUCT ID: ${product.id} IMAGE URL ${pictureURL}\n`
            )
            const response = await fetch(pictureURL)
            if (response.ok) {
                const arrayBuffer = await response.arrayBuffer()
                const uint8Array = new Uint8Array(arrayBuffer) // https://learn.javascript.ru/arraybuffer-binary-arrays#metody-typedarray
                sharp(uint8Array).toFile(`${product.folder}/${pictureName}`) // https://sharp.pixelplumbing.com/api-constructor
            } else {
                console.log('HTTP Error: ' + response.status)
            }
        }
    }
})()
